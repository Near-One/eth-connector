use near_sdk_sim::{
    call, deploy, init_simulator, view, ContractAccount, UserAccount, DEFAULT_GAS,
};

extern crate eth_connector;
use eth_connector::{EthConnectorContract, Proof};
use near_sdk::json_types::{ValidAccountId, U128};
use std::convert::TryFrom;

near_sdk_sim::lazy_static! {
    static ref TOKEN_WASM_BYTES: &'static [u8] = include_bytes!("../res/eth_connector.wasm").as_ref();
}

fn init() -> (UserAccount, ContractAccount<EthConnectorContract>) {
    let master_account = init_simulator(None);
    let castodian_address = "8Cd0D4db87BFbf41E084B01521ffb4e9A9753bb2";

    let contract_account = deploy! {
        contract: EthConnectorContract,
        contract_id: "contract",
        bytes: &TOKEN_WASM_BYTES,
        signer_account: master_account,
        init_method: new("contract".into(), castodian_address.into())
    };
    (master_account, contract_account)
}

#[test]
fn init_test() {
    let (_master_account, _contract_account) = init();
}

#[test]
fn test_sim_deposit() {
    let (master_account, contract) = init();

    let proof = Proof {
        log_index: 0,
        log_entry_data: vec![248,188,148,140,208,212,219,135,191,191,65,224,132,176,21,33,255,180,233,169,117,59,178,248,99,160,245,104,31,157,13,177,185,17,172,24,238,131,213,21,161,207,16,81,133,58,158,174,65,131,22,162,253,247,222,164,39,197,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,0,0,0,0,0,0,0,0,0,0,0,0,180,198,99,202,232,101,250,44,253,67,109,180,35,136,155,54,246,213,214,87,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,210],
        receipt_index: 1,
        receipt_data: vec![249,1,199,1,130,196,12,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,190,248,188,148,140,208,212,219,135,191,191,65,224,132,176,21,33,255,180,233,169,117,59,178,248,99,160,245,104,31,157,13,177,185,17,172,24,238,131,213,21,161,207,16,81,133,58,158,174,65,131,22,162,253,247,222,164,39,197,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,0,0,0,0,0,0,0,0,0,0,0,0,180,198,99,202,232,101,250,44,253,67,109,180,35,136,155,54,246,213,214,87,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,210],
        header_data: vec![249,2,23,160,52,226,137,142,0,149,176,63,144,9,242,104,6,123,93,219,69,36,99,154,136,78,160,254,178,167,3,102,167,113,42,182,160,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,148,186,114,238,126,229,223,163,101,166,38,70,65,44,111,10,22,13,77,32,223,160,108,76,143,242,166,20,253,101,62,107,118,29,217,22,49,173,47,91,208,115,64,27,171,75,20,40,124,158,142,121,3,98,160,149,2,75,250,26,130,211,22,157,134,59,140,43,66,176,24,70,75,114,20,222,86,113,106,123,184,65,27,201,40,3,129,160,32,183,26,71,226,192,75,11,127,111,182,80,144,255,48,194,162,141,203,36,44,104,122,66,12,134,58,116,233,11,17,207,185,1,0,0,0,0,0,1,0,0,0,0,0,128,8,0,0,34,0,0,0,0,16,2,0,0,4,32,8,68,8,0,0,0,0,0,8,64,0,0,0,0,128,0,65,16,0,132,0,88,128,0,4,0,0,2,80,5,33,0,34,0,16,0,180,1,0,22,1,0,128,96,0,0,0,64,0,1,8,0,0,5,0,130,0,0,1,0,20,32,32,8,0,0,4,128,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,128,162,0,0,0,0,0,0,129,16,64,0,0,36,16,2,16,3,2,128,0,192,0,136,0,192,8,8,4,0,16,0,0,0,16,0,0,0,1,64,2,0,2,4,0,0,80,0,0,16,0,2,0,4,2,64,0,0,0,0,0,0,0,0,0,0,146,128,0,0,0,0,128,64,0,0,0,8,0,0,1,0,0,0,0,3,2,0,0,64,4,16,0,0,0,32,0,0,18,0,2,64,64,0,128,64,128,0,2,0,16,64,0,64,0,20,16,132,130,0,0,128,0,0,8,0,0,0,0,0,8,64,0,0,64,64,0,64,192,0,2,0,0,0,0,128,0,132,51,28,191,103,131,149,0,75,131,122,18,0,131,55,222,27,132,96,62,176,90,153,216,131,1,9,25,132,103,101,116,104,136,103,111,49,46,49,53,46,54,133,108,105,110,117,120,160,87,132,231,182,153,209,236,203,130,193,8,39,128,224,146,25,232,129,210,1,180,226,95,112,65,217,205,255,188,137,80,198,136,69,1,187,87,227,2,224,112],
        proof: vec![
            vec![248,113,160,50,243,164,89,6,255,167,43,77,167,40,216,200,47,45,248,26,25,182,161,105,102,155,64,132,93,43,191,14,250,212,93,160,76,198,6,62,208,180,49,202,215,95,149,40,31,53,84,66,76,96,98,1,59,219,223,174,229,71,126,90,89,52,27,147,128,128,128,128,128,128,160,173,48,112,70,14,17,81,198,34,108,201,212,244,143,62,45,18,66,182,169,190,157,69,249,251,100,49,125,113,90,10,77,128,128,128,128,128,128,128,128],
            vec![249,1,241,128,160,184,52,30,89,125,25,170,96,14,165,153,119,215,248,187,116,231,21,106,210,246,51,187,208,242,89,55,196,80,200,203,169,160,161,205,192,136,251,32,217,242,66,17,142,145,179,72,113,39,23,5,18,100,130,92,124,31,224,35,171,91,223,13,97,62,160,102,225,172,221,78,139,237,4,125,231,232,43,176,234,185,155,179,121,238,169,8,85,68,153,220,138,165,209,35,194,186,10,160,14,186,116,164,220,121,238,40,224,40,139,63,46,94,90,169,180,49,138,226,199,54,131,73,92,253,218,137,99,42,102,166,160,51,104,246,113,9,70,25,249,151,10,83,103,54,231,211,193,2,177,187,211,87,85,31,60,69,254,103,153,9,225,145,90,160,171,84,97,39,72,248,225,58,127,239,221,15,129,87,33,77,172,58,151,80,105,189,34,176,56,107,78,139,33,195,49,63,160,92,245,68,141,173,195,1,242,26,209,1,40,70,22,126,37,232,76,221,208,150,37,203,157,253,201,213,60,69,23,50,187,160,89,231,171,71,2,189,255,245,48,246,163,127,197,55,32,92,112,182,131,84,55,103,125,232,70,222,183,241,220,66,80,127,160,248,241,104,95,100,143,40,104,238,28,135,43,66,193,57,91,73,23,47,96,6,74,239,73,67,34,180,242,249,128,156,165,160,135,117,46,94,137,69,127,14,205,120,189,217,199,79,46,56,72,149,184,42,98,195,129,69,247,111,154,6,171,254,35,11,160,219,111,18,61,59,153,167,126,142,129,130,187,156,184,253,140,218,33,199,199,16,241,241,219,130,114,145,29,61,231,118,40,160,111,51,228,55,64,208,129,171,212,184,138,5,222,108,163,195,71,142,73,180,208,155,124,243,16,147,79,117,134,107,66,146,160,69,243,53,2,91,136,7,55,137,28,18,253,45,166,29,252,127,105,186,69,186,153,134,208,183,131,163,104,61,208,243,10,160,126,46,211,117,246,103,174,239,10,51,186,59,40,252,108,54,121,189,240,186,144,69,237,167,102,29,8,166,50,205,126,165,160,104,50,46,213,116,245,159,181,100,113,106,174,203,107,9,94,96,165,93,67,253,92,73,87,128,227,155,90,153,252,66,141,128],
            vec![249,1,206,32,185,1,202,249,1,199,1,130,196,12,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,190,248,188,148,140,208,212,219,135,191,191,65,224,132,176,21,33,255,180,233,169,117,59,178,248,99,160,245,104,31,157,13,177,185,17,172,24,238,131,213,21,161,207,16,81,133,58,158,174,65,131,22,162,253,247,222,164,39,197,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,0,0,0,0,0,0,0,0,0,0,0,0,180,198,99,202,232,101,250,44,253,67,109,180,35,136,155,54,246,213,214,87,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,210],
        ],
        skip_bridge_call: false,
    };

    let _res = call!(
        master_account,
        contract.deposit(proof.clone()),
        gas = DEFAULT_GAS * 3
    );

    println!("#1: {:#?}", _res.promise_results());

    let acc_id = ValidAccountId::try_from("rcv1").unwrap();
    let res = view!(contract.ft_balance_of(acc_id));
    let minted_balance = res.unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(100));
}

#[test]
fn test_sim_withdraw() {
    let (master_account, contract) = init();
    let proof = Proof {
        log_index: 0,
        log_entry_data: vec![],
        receipt_index: 0,
        receipt_data: vec![],
        header_data: vec![],
        proof: vec![],
        skip_bridge_call: false,
    };
    call!(
        master_account,
        contract.deposit(proof.clone()),
        gas = DEFAULT_GAS * 3
    );
    let acc_id = ValidAccountId::try_from("rcv1").unwrap();
    let res = view!(contract.ft_balance_of(acc_id.clone()));
    let minted_balance = res.unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(100));

    let mut proof1 = proof.clone();
    proof1.log_index = 1;

    let _res = call!(
        master_account,
        contract.withdraw(proof1.clone()),
        gas = DEFAULT_GAS * 3
    );

    // println!("#1: {:#?}", _res.promise_results());
    let res = view!(contract.ft_balance_of(acc_id));
    let minted_balance = res.unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(95));
}
