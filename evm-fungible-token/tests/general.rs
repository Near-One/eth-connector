use near_sdk_sim::{call, deploy, init_simulator, view, ContractAccount, UserAccount, DEFAULT_GAS};

extern crate eth_connector;
use eth_connector::{EthConnectorContract, Proof};
use near_sdk::json_types::{ValidAccountId, U128};
use std::convert::TryFrom;

near_sdk_sim::lazy_static! {
    static ref TOKEN_WASM_BYTES: &'static [u8] = include_bytes!("../res/eth_connector.wasm").as_ref();
}

fn init() -> (UserAccount, ContractAccount<EthConnectorContract>) {
    let master_account = init_simulator(None);
    let castodian_address = "8Cd0D4db87BFbf41E084B01521ffb4e9A9753bb2";

    let contract_account = deploy! {
        contract: EthConnectorContract,
        contract_id: "contract",
        bytes: &TOKEN_WASM_BYTES,
        signer_account: master_account,
        init_method: new("contract".into(), castodian_address.into())
    };
    (master_account, contract_account)
}

#[test]
fn init_test() {
    let (_master_account, _contract_account) = init();
}

#[test]
fn test_sim_deposit() {
    let (master_account, contract) = init();

    call_deposit(&master_account, &contract);

    let acc_id = ValidAccountId::try_from("b4c663cae865fa2cfd436db423889b36f6d5d657").unwrap();
    let res = view!(contract.ft_balance_of(acc_id));
    let minted_balance = res.unwrap_json::<U128>();
    let amount = 52300;
    let fee = 1234;
    assert_eq!(minted_balance, U128::from(amount - fee));

    let acc_id = ValidAccountId::try_from("contract").unwrap();
    let res = view!(contract.ft_balance_of(acc_id));
    let minted_balance = res.unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(fee));
}

#[test]
fn test_sim_withdraw() {
    let (master_account, contract) = init();
    call_deposit(&master_account, &contract);

    let acc_id = "b4c663cae865fa2cfd436db423889b36f6d5d657";
    let initial_amount = 52300;
    let initial_fee = 1234;
    let amount = 100;
    let fee = 5;
    let _res = call!(
        master_account,
        contract.withdraw(acc_id.into(), U128::from(amount), U128::from(fee)),
        gas = DEFAULT_GAS * 3
    );

    println!("#1: {:#?}", _res.promise_results());

    let acc_id = ValidAccountId::try_from(acc_id).unwrap();
    let res = view!(contract.ft_balance_of(acc_id));
    let burned_balance = res.unwrap_json::<U128>();
    assert_eq!(
        burned_balance,
        U128::from(initial_amount - initial_fee - amount + fee)
    );

    // Check minted fee
    let acc_id = ValidAccountId::try_from("contract").unwrap();
    let res = view!(contract.ft_balance_of(acc_id));
    let minted_balance = res.unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(initial_fee));
}

fn call_deposit(master_account: &UserAccount, contract: &ContractAccount<EthConnectorContract>) {
    #[rustfmt::skip]
    let proof = Proof {
        log_index: 0,
        log_entry_data: vec![248,188,148,152,147,0,173,199,195,141,76,200,119,244,3,249,123,248,211,253,68,68,43,248,99,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,162,173,166,1,162,70,10,221,48,5,156,148,198,235,26,173,171,226,209,207,112,229,53,120,92,139,45,50,29,18,201,69,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,169,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194],
        receipt_index: 1,
        receipt_data: vec![249,1,199,1,130,226,109,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,0,0,0,64,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,190,248,188,148,152,147,0,173,199,195,141,76,200,119,244,3,249,123,248,211,253,68,68,43,248,99,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,162,173,166,1,162,70,10,221,48,5,156,148,198,235,26,173,171,226,209,207,112,229,53,120,92,139,45,50,29,18,201,69,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,169,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194],
        header_data: vec![249,2,21,160,233,32,9,55,233,230,76,150,14,106,126,133,113,52,230,66,253,53,199,189,131,111,202,168,40,216,181,81,242,52,56,42,160,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,148,3,62,246,219,159,189,14,230,14,41,49,144,107,152,127,224,40,4,113,160,160,185,237,229,176,67,255,170,165,77,125,149,183,142,39,26,94,139,56,4,98,140,175,248,222,196,221,238,116,119,58,156,5,160,217,220,184,16,181,33,161,74,18,154,9,95,41,43,245,156,159,199,44,146,119,72,212,146,143,254,200,182,248,172,199,215,160,120,65,57,229,21,54,219,230,173,52,168,161,16,214,42,193,204,50,59,190,46,128,53,199,168,97,88,31,245,180,161,139,185,1,0,0,0,36,0,0,0,32,0,0,0,0,0,0,0,0,0,0,128,0,136,0,0,0,1,1,1,36,64,16,132,0,0,32,0,0,64,0,0,32,0,1,0,0,128,0,0,0,0,0,0,0,0,0,16,64,0,0,80,0,48,0,32,0,0,16,0,0,0,8,48,0,80,4,0,0,8,0,32,0,0,3,0,0,0,1,0,1,0,8,0,0,0,0,0,0,0,0,17,0,0,0,0,4,0,16,0,0,0,0,0,0,0,64,0,0,0,4,0,80,0,0,0,0,16,16,0,0,0,2,0,0,32,0,0,0,0,0,64,0,32,0,0,16,4,0,64,128,0,0,0,0,0,0,0,1,0,0,0,0,0,2,0,132,0,16,4,32,4,74,80,32,2,4,8,208,34,0,0,0,0,0,0,2,0,0,0,72,0,128,1,2,0,0,0,0,2,144,0,0,36,0,0,32,2,0,0,0,8,0,0,0,64,64,16,0,0,128,0,0,4,0,0,32,128,16,20,0,0,0,0,0,0,2,0,8,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,136,0,4,0,0,132,32,26,102,26,131,149,49,189,131,122,18,0,131,54,204,193,132,96,65,122,102,151,214,131,1,9,20,132,103,101,116,104,134,103,111,49,46,49,53,133,108,105,110,117,120,160,40,5,246,116,189,167,145,84,157,187,130,126,12,120,183,97,8,57,156,238,237,193,107,87,124,95,172,110,17,174,112,250,136,15,99,189,6,191,147,126,7],
        proof: vec![
            vec![248,113,160,137,152,183,97,216,126,147,34,105,169,129,160,68,211,56,191,83,23,198,24,107,223,172,238,213,54,177,102,180,51,105,39,160,158,206,131,114,230,51,6,14,141,6,121,227,167,135,238,115,188,21,37,251,31,116,3,160,69,250,138,255,120,12,240,21,128,128,128,128,128,128,160,59,89,211,99,231,76,169,143,26,127,192,49,185,220,139,196,81,97,69,23,55,121,14,28,193,91,251,69,99,97,87,196,128,128,128,128,128,128,128,128],
            vec![249,1,241,128,160,165,46,31,237,15,234,135,18,28,44,217,12,18,88,146,206,8,65,234,18,45,133,74,218,73,211,116,161,187,88,65,86,160,232,67,223,168,152,60,192,76,160,176,4,228,179,19,41,204,83,39,34,24,69,186,24,14,228,186,163,238,8,15,33,154,160,32,149,33,74,40,79,92,60,145,140,254,238,121,15,170,153,193,187,65,201,10,254,199,174,155,14,214,89,247,246,190,164,160,211,197,38,250,83,195,139,209,248,119,78,16,115,151,149,216,25,26,247,121,4,4,181,173,158,128,73,234,160,43,225,250,160,150,136,159,110,31,90,127,196,189,61,245,78,231,0,22,236,39,193,228,148,45,58,228,229,222,139,150,55,168,190,71,76,160,163,132,237,82,252,68,0,136,4,206,131,62,102,41,77,225,218,99,23,236,120,211,17,217,245,54,25,226,174,9,86,157,160,112,80,46,232,31,199,234,57,140,135,68,71,62,85,33,126,103,91,108,113,206,226,129,158,218,211,158,99,150,145,111,95,160,203,244,200,132,80,166,138,4,173,239,171,154,191,68,65,236,60,236,15,81,137,209,157,136,215,200,213,84,177,158,119,166,160,249,223,30,83,170,246,164,120,89,99,149,216,75,249,236,167,74,194,17,72,164,71,187,60,26,248,119,183,13,162,59,124,160,24,83,103,75,87,223,214,17,181,194,243,97,119,209,139,154,161,231,157,11,157,9,201,176,211,233,219,149,102,152,8,219,160,203,52,54,251,115,203,127,237,230,205,88,47,75,143,246,238,93,157,142,18,63,18,154,5,222,1,87,38,132,237,173,5,160,113,105,15,235,99,108,173,200,251,83,232,188,37,9,106,24,194,60,97,91,109,154,230,105,111,93,123,226,155,78,170,144,160,12,45,137,218,236,190,27,40,143,137,134,44,107,174,86,177,163,173,48,25,7,136,203,233,69,177,168,3,124,104,250,5,160,162,76,125,132,140,189,175,120,62,99,225,52,16,161,7,187,148,166,27,35,133,48,31,243,60,172,231,193,95,177,17,111,160,128,89,235,111,98,88,21,62,202,212,205,68,169,228,203,74,163,35,26,162,171,143,99,106,102,233,229,90,56,200,109,160,128],
            vec![249,1,206,32,185,1,202,249,1,199,1,130,226,109,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,0,0,0,0,0,0,64,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,190,248,188,148,152,147,0,173,199,195,141,76,200,119,244,3,249,123,248,211,253,68,68,43,248,99,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,160,162,173,166,1,162,70,10,221,48,5,156,148,198,235,26,173,171,226,209,207,112,229,53,120,92,139,45,50,29,18,201,69,184,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,169,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194],
        ],
        skip_bridge_call: false,
    };

    let _res = call!(
        master_account,
        contract.deposit(proof.clone()),
        gas = DEFAULT_GAS * 3
    );

    println!("#1: {:#?}", _res.promise_results());
}
