mak	use near_sdk_sim::{call, deploy, init_simulator, view, ContractAccount, UserAccount, DEFAULT_GAS};

extern crate eth_connector;
use eth_connector::{EthConnectorContract, Proof};
use near_sdk::json_types::{ValidAccountId, U128};
use near_sdk::serde_json;
use std::convert::TryFrom;

near_sdk_sim::lazy_static! {
    static ref TOKEN_WASM_BYTES: &'static [u8] = include_bytes!("../res/eth_connector.wasm").as_ref();
}

const PROOF_DATA: &'static str = r#"{"log_index":0,"log_entry_data":[248,251,148,185,247,33,158,67,78,170,112,33,174,95,158,205,12,171,194,64,84,71,163,248,66,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,116,101,115,116,108,111,99,97,108,46,116,101,115,116,110,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"receipt_index":1,"receipt_data":[249,2,6,1,130,207,82,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,251,148,185,247,33,158,67,78,170,112,33,174,95,158,205,12,171,194,64,84,71,163,248,66,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,116,101,115,116,108,111,99,97,108,46,116,101,115,116,110,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"header_data":[249,2,23,160,158,168,60,136,34,205,120,126,141,84,74,56,238,52,87,16,18,96,35,196,4,210,189,98,152,124,175,50,159,204,67,159,160,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,148,244,128,23,99,138,221,13,195,153,223,80,64,140,222,68,57,99,238,171,130,160,42,205,198,107,150,105,57,175,172,103,241,154,19,176,218,65,103,125,96,94,193,51,218,57,250,36,85,34,3,254,81,229,160,50,81,223,39,209,182,128,81,154,152,232,16,37,255,33,200,118,240,106,25,79,127,1,179,113,150,241,64,129,39,58,138,160,34,250,110,167,44,209,243,187,39,1,74,43,177,136,25,104,227,252,7,106,92,83,157,193,244,170,152,180,226,44,185,58,185,1,0,0,160,0,0,0,0,0,0,0,0,0,4,128,0,0,0,0,0,32,0,0,0,0,0,128,129,5,0,48,0,0,0,0,0,2,64,0,0,0,8,2,0,0,4,0,0,0,0,0,0,0,0,64,0,8,0,0,0,64,0,0,0,0,0,16,2,16,8,0,0,2,0,0,0,0,8,1,64,0,160,1,17,0,8,0,4,32,0,0,0,0,0,2,0,1,0,0,2,128,0,10,16,64,0,0,0,16,128,0,128,8,0,4,0,0,0,128,0,0,16,0,0,0,16,0,0,32,64,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,1,0,16,0,0,0,8,0,0,0,64,0,32,16,0,0,0,0,0,0,0,0,17,64,0,0,0,0,0,0,2,0,0,0,80,0,0,0,0,0,16,0,0,0,0,2,0,64,0,0,2,16,0,0,32,0,0,0,0,0,0,34,0,0,16,0,64,0,0,0,16,0,0,0,16,2,0,32,0,0,0,0,0,0,0,16,0,0,0,0,0,2,0,32,8,0,2,20,128,0,8,0,0,0,0,64,6,0,0,0,0,132,26,218,145,139,131,149,62,59,131,122,18,0,131,21,81,116,132,96,66,50,105,153,216,131,1,9,25,132,103,101,116,104,136,103,111,49,46,49,53,46,54,133,108,105,110,117,120,160,217,240,46,182,148,216,40,130,214,102,175,105,156,164,47,214,241,125,53,196,5,27,174,123,139,212,6,80,213,52,115,208,136,89,155,218,222,129,155,11,189],"proof":[[248,81,160,189,205,130,168,54,12,190,158,165,194,121,226,101,252,11,10,136,57,232,25,27,240,7,33,226,199,117,3,58,77,7,172,128,128,128,128,128,128,128,160,60,120,248,39,213,156,243,93,248,99,180,31,148,111,111,130,103,36,165,67,248,222,164,85,140,169,86,178,107,69,126,160,128,128,128,128,128,128,128,128],[249,1,81,128,160,143,139,188,224,33,71,44,243,202,27,237,252,219,251,221,183,227,112,134,17,76,119,154,209,183,115,58,177,251,120,226,48,160,112,253,39,147,42,5,62,119,17,241,32,177,15,249,230,29,7,6,43,75,128,34,161,6,108,63,254,187,89,190,78,84,160,179,236,152,124,206,151,71,177,253,40,65,190,236,194,167,126,159,168,88,171,188,240,89,83,82,163,94,230,35,128,49,33,160,253,225,231,238,182,151,1,98,1,184,79,153,173,3,160,211,95,168,242,206,50,103,102,119,232,87,240,88,145,34,94,7,160,74,168,202,53,107,112,195,150,197,110,172,145,60,168,244,229,97,242,197,171,39,12,6,206,84,104,55,48,74,199,202,248,160,156,194,249,0,178,249,231,170,52,2,117,209,117,211,7,13,51,130,12,174,205,23,128,70,245,33,3,133,204,38,171,143,160,129,179,170,126,7,198,179,39,166,86,118,232,210,141,108,136,154,0,132,59,118,144,188,212,50,227,192,56,134,229,52,60,160,42,45,59,159,91,165,132,129,37,10,163,33,3,91,13,135,131,183,78,177,98,128,10,50,14,162,82,207,22,237,89,138,160,77,238,55,149,75,163,5,130,24,115,99,166,34,166,78,162,171,41,69,222,189,115,205,35,22,245,188,62,211,36,153,11,160,89,127,139,60,38,220,142,251,225,231,215,213,97,184,241,72,221,199,236,117,115,61,217,176,209,45,223,4,54,153,128,31,128,128,128,128,128,128],[249,2,13,32,185,2,9,249,2,6,1,130,207,82,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,251,148,185,247,33,158,67,78,170,112,33,174,95,158,205,12,171,194,64,84,71,163,248,66,160,91,253,175,236,57,174,146,96,226,220,66,250,35,21,1,244,101,251,175,87,166,187,188,197,23,157,14,86,105,51,218,174,160,0,0,0,0,0,0,0,0,0,0,0,0,137,27,39,73,35,139,39,255,88,233,81,8,142,85,176,77,231,29,195,116,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,116,101,115,116,108,111,99,97,108,46,116,101,115,116,110,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],"skip_bridge_call":false}"#;
const DEPOSITED_AMOUNT: u128 = 50450;
const DEPOSITED_FEE: u128 = 450;
const DEPOSITED_RECIPIENT: &'static str = "testlocal.testnet";
const CUSTODIAN_ADDRESS: &'static str = "b9f7219e434EAA7021Ae5f9Ecd0CaBc2405447A3";
const PROVER_ACCOUNT: &'static str = "eth_connector.root";
const CONTRACT_ACC: &'static str = "eth_connector.root";
const RECIPIENT_ETH_ADDRESS: &'static str = "891b2749238b27ff58e951088e55b04de71dc374";

fn init() -> (UserAccount, ContractAccount<EthConnectorContract>) {
    let master_account = init_simulator(None);

    let contract_account = deploy! {
        contract: EthConnectorContract,
        contract_id: CONTRACT_ACC,
        bytes: &TOKEN_WASM_BYTES,
        signer_account: master_account,
        init_method: new(PROVER_ACCOUNT.into(), CUSTODIAN_ADDRESS.into())
    };
    (master_account, contract_account)
}

#[test]
fn init_test() {
    let (_master_account, _contract_account) = init();
}

#[test]
fn test_sim_deposit() {
    let (master_account, contract) = init();

    call_deposit(&master_account, &contract);

    let acc_id = ValidAccountId::try_from(DEPOSITED_RECIPIENT).unwrap();
    let minted_balance = view!(contract.ft_balance_of(acc_id)).unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(DEPOSITED_AMOUNT - DEPOSITED_FEE));

    let acc_id = ValidAccountId::try_from(CONTRACT_ACC).unwrap();
    let minted_balance = view!(contract.ft_balance_of(acc_id)).unwrap_json::<U128>();
    assert_eq!(minted_balance, U128::from(DEPOSITED_FEE));
}

#[test]
fn test_sim_withdraw() {
    let (master_account, contract) = init();
    call_deposit(&master_account, &contract);

    let withdraw_amount = 100;
    let _res = call!(
        master_account,
        contract.withdraw(RECIPIENT_ETH_ADDRESS.into(), U128::from(withdraw_amount)),
        gas = DEFAULT_GAS * 3
    );

    println!("#1: {:#?}", _res.promise_results());

    let acc_id = ValidAccountId::try_from(CONTRACT_ACC).unwrap();
    let burned_balance = view!(contract.ft_balance_of(acc_id)).unwrap_json::<U128>();
    assert_eq!(
        burned_balance,
        U128::from(withdraw_amount)
    );
}

fn call_deposit(master_account: &UserAccount, contract: &ContractAccount<EthConnectorContract>) {
    let proof: Proof = serde_json::from_str(PROOF_DATA).unwrap();

    let _res = call!(
        master_account,
        contract.deposit(proof.clone()),
        gas = DEFAULT_GAS * 3
    );

    println!("#1: {:#?}", _res.promise_results());
}
